{"version":3,"sources":["store/defaultGlobalState.js","store/GlobalStateContext.js","images/logo.svg","ui/Button/Button.sc.jsx","ui/Button/Button.jsx","config/config.js","utils/apiDataUtils.js","store/useGlobalStateApiProperty.js","api/httpService.js","api/user.js","components/About/About.jsx","components/DashBoard/DashBoard.jsx","components/App/App.jsx","styles/globalStyles.js","styles/theme.js","styles/StylesAndThemeProvider.jsx","store/GlobalStateContextProvider.jsx","reportWebVitals.js","index.jsx"],"names":["defaultGlobalState","counter","users","value","selectedUser","initialGlobalStateContextValue","GlobalStateContext","createContext","useGlobalState","useContext","Button","styled","MUI","theme","color","white","text","type","onClick","variant","config","Object","keys","process","forEach","key","substr","getConfig","getApiDataState","state","error","hasOwnProperty","syncApiData","apiCall","setState","a","delayedSetState","setTimeout","then","useGlobalStateApiProperty","apiCallFn","Error","globalState","setGlobalState","stateValue","setStateValue","newValue","prevState","useEffect","httpService","url","options","fetch","API_URL","headers","Authorization","response","status","statusText","json","data","String","getAll","method","getUserById","id","Promise","resolve","About","userApi","usersState","setUsersState","className","src","logo","alt","href","target","rel","map","user","name","email","DashBoard","useState","currentUserId","setCurrentUserId","currentUserState","setCurrentUserState","JSON","stringify","App","setInterval","display","flexDirection","justifyContent","alignItems","component","Link","to","exact","path","NOT_SECRET_CODE","globalStyles","css","adjustedMuiTheme","createTheme","palette","primary","main","colors","secondary","userTheme","red","blue","fontSize","default","small","StylesAndThemeProvider","children","StylesProvider","injectFirst","styles","GlobalStateContextProvider","contextValue","useMemo","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e83df74.chunk.js","sourcesContent":["// =====================================\n// Define your default global state here\n// =====================================\n\nexport const defaultGlobalState = {\n  // example of simple object\n  counter: 0,\n\n  // example of API result object\n  users: {\n    // value: undefined, // use undefined to enable autoloading\n    value: [], // do not use undefined to disable autoloading\n  },\n  selectedUser: {\n    // value: undefined, // use undefined for autoloading\n    value: {}, // use initial value to disable autoloading\n  },\n};\n\n// ======================================\n","import { createContext, useContext } from 'react';\nimport { defaultGlobalState } from './defaultGlobalState';\n\nconst initialGlobalStateContextValue = [\n  defaultGlobalState, // state object\n  () => undefined, // setState function\n];\n\nexport const GlobalStateContext = createContext(initialGlobalStateContextValue);\nexport const useGlobalState = () => useContext(GlobalStateContext);\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import styled from '@emotion/styled';\nimport * as MUI from '@mui/material';\n\nexport const Button = styled(MUI.Button)`\n  color: ${({ theme }) => theme.color.white};\n`;\n","import React from 'react';\nimport * as SC from './Button.sc';\n\nexport const Button = ({ text = 'Press Me', type, onClick }) => (\n  <SC.Button variant=\"contained\" type={type} onClick={onClick}>\n    {text}\n  </SC.Button>\n);\n","const getConfig = () => {\n  const config = {};\n\n  // load config from .env file without REACT_APP_ prefix\n  [...Object.keys(process.env)].forEach(key => {\n    const prefix = key.substr(0, 10);\n    if (prefix === 'REACT_APP_') {\n      config[key.substr(10)] = process.env[key];\n    }\n  });\n\n  return config;\n};\n\nexport const config = getConfig();\n","/* eslint-disable no-console */\n/* eslint-disable no-prototype-builtins */\nexport const getApiDataState = state => {\n  if (state?.error) return 'error';\n  if (!state?.error && !state.hasOwnProperty('value')) return 'loading';\n  return 'ready';\n};\n\nexport const syncApiData = async (apiCall, state, setState) => {\n  /* TODO - change delayedSetState to setState */\n  const delayedSetState = value => {\n    setTimeout(() => setState(value), 500);\n  };\n  if (getApiDataState(state) === 'loading') {\n    await apiCall().then(delayedSetState, delayedSetState);\n  }\n};\n","/* eslint-disable no-console */\nimport { useEffect } from 'react';\nimport { useGlobalState } from './GlobalStateContext';\nimport { syncApiData } from '../utils/apiDataUtils';\n\nexport const useGlobalStateApiProperty = ({ key, apiCallFn }) => {\n  if (!key || !apiCallFn) {\n    throw new Error('Add key and apiCallFn to useGlobalStateApiProperty');\n  }\n\n  const [globalState, setGlobalState] = useGlobalState();\n  const stateValue = globalState[key];\n  const setStateValue = newValue =>\n    setGlobalState(prevState => ({\n      ...prevState,\n      [key]: newValue,\n    }));\n\n  useEffect(() => {\n    syncApiData(apiCallFn, stateValue, setStateValue);\n  }, [stateValue]);\n\n  return [stateValue, setStateValue];\n};\n","import { config } from '../config/config';\n\n/*    \n    This service returns only two variants of result:\n    \n      1) In case of succsesful result: \n      {\n        value: <returned value>,\n      }\n\n      2) When something goes wrong: \n      {\n        error: <error message>,\n      }\n */\n\nexport const httpService = async (url, options) => {\n  /* TODO - add auth tocken definition */\n  const tocken = 'ID_TOKEN_EXAMPLE';\n\n  try {\n    const response = await fetch(`${config.API_URL}/${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${tocken}`,\n      },\n    });\n\n    if (response.status !== 200) {\n      throw new Error(`${response.status} ${response.statusText}`);\n    }\n\n    try {\n      const json = await response.json();\n      return {\n        value: json.data,\n      };\n    } catch (error) {\n      throw new Error(`Wrong API data recieved`);\n    }\n  } catch (error) {\n    return {\n      error: String(error),\n    };\n  }\n};\n","import { httpService } from './httpService';\n\nexport const getAll = async () => {\n  return httpService('users.json', { method: 'GET' });\n};\n\nexport const getUserById = async id => {\n  /* TODO - check and validate parameters */\n  if (!id) {\n    return Promise.resolve({ value: {} });\n  }\n  return httpService(`users${id}.json`, { method: 'GET' });\n};\n","/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-console */\nimport React from 'react';\nimport logo from '../../images/logo.svg';\n\nimport { useGlobalStateApiProperty } from '../../store/useGlobalStateApiProperty';\nimport * as userApi from '../../api/user';\nimport { getApiDataState } from '../../utils/apiDataUtils';\nimport { Button } from '../../ui/Button/Button';\n\nexport const About = () => {\n  const [usersState, setUsersState] = useGlobalStateApiProperty({\n    key: 'users',\n    apiCallFn: () => userApi.getAll(),\n  });\n  const state = getApiDataState(usersState);\n\n  const handleReload = () => setUsersState({});\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>{process.env.REACT_APP_NOT_SECRET_CODE}</p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          List of authors:\n        </a>\n        <hr />\n        {state === 'error' && usersState.error}\n        {state === 'loading' && '...loading...'}\n        {state === 'ready' &&\n          usersState.value.map(user => (\n            <div key={user.email}>\n              {user.name}, {user.email}\n            </div>\n          ))}\n        <hr />\n        {(state === 'ready' || state === 'error') && (\n          <Button text=\"Reload list\" onClick={handleReload} />\n        )}\n      </header>\n    </div>\n  );\n};\n","/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport logo from '../../images/logo.svg';\nimport { useGlobalStateApiProperty } from '../../store/useGlobalStateApiProperty';\nimport * as userApi from '../../api/user';\nimport { getApiDataState } from '../../utils/apiDataUtils';\nimport { Button } from '../../ui/Button/Button';\n\nexport const DashBoard = () => {\n  const [currentUserId, setCurrentUserId] = useState();\n  const [currentUserState, setCurrentUserState] = useGlobalStateApiProperty({\n    key: 'selectedUser',\n    apiCallFn: () => userApi.getUserById(currentUserId),\n  });\n  const state = getApiDataState(currentUserState);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>{process.env.REACT_APP_NOT_SECRET_CODE}</p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          List of authors:\n        </a>\n        <hr />\n        {state === 'error' && currentUserState.error}\n        {state === 'loading' && '...loading...'}\n        {state === 'ready' && JSON.stringify(currentUserState.value)}\n        <hr />\n        {(state === 'ready' || state === 'error') && (\n          <div>\n            <Button\n              text=\"Load user 1\"\n              onClick={() => {\n                setCurrentUserId(1);\n                setCurrentUserState({});\n              }}\n            />{' '}\n            <Button\n              text=\"Load user 2\"\n              onClick={() => {\n                setCurrentUserId(2);\n                setCurrentUserState({});\n              }}\n            />{' '}\n            <Button\n              text=\"Unload user\"\n              onClick={() => {\n                setCurrentUserId();\n                setCurrentUserState({});\n              }}\n            />\n          </div>\n        )}\n      </header>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport * as MUI from '@mui/material';\nimport { useGlobalState } from '../../store/GlobalStateContext';\nimport logo from '../../images/logo.svg';\nimport * as UI from '../../ui';\nimport { config } from '../../config/config';\nimport { About } from '../About/About';\nimport { DashBoard } from '../DashBoard/DashBoard';\n\nfunction App() {\n  const [globalState, setGlobalState] = useGlobalState();\n\n  // ============================================\n  // TODO - Remove this example of state changing\n  useEffect(() => {\n    setInterval(() => {\n      setGlobalState(prevState => ({\n        ...prevState,\n        counter: prevState.counter + 1,\n      }));\n    }, 1000);\n  }, []);\n\n  // Example of middleware for state logging\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    // console.log(globalState);\n  }, [globalState]);\n\n  const handleClick = () => {\n    setGlobalState(prevState => ({\n      ...prevState,\n      counter: prevState.counter - 10,\n    }));\n  };\n  // TODO - Remove these examples\n  // ============================================\n\n  return (\n    <Router>\n      <MUI.Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <MUI.ButtonGroup>\n          <MUI.Button\n            color=\"secondary\"\n            component={Link}\n            to={`${process.env.REACT_APP_API_URL}/`}\n          >\n            Home\n          </MUI.Button>\n          <MUI.Button\n            color=\"secondary\"\n            component={Link}\n            to={`${process.env.REACT_APP_API_URL}/about`}\n          >\n            About\n          </MUI.Button>\n          <MUI.Button\n            color=\"secondary\"\n            component={Link}\n            to={`${process.env.REACT_APP_API_URL}/dashboard`}\n          >\n            Dashboard\n          </MUI.Button>\n        </MUI.ButtonGroup>\n      </MUI.Box>\n      <Switch>\n        <Route exact path=\"/\">\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <a\n                className=\"App-link\"\n                href=\"https://reactjs.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Learn React\n              </a>\n              <hr />\n              {config.NOT_SECRET_CODE}\n              <hr />\n              This is an example of React App with the context based global\n              state managment\n              <hr />\n              <UI.Button\n                text=\"Click to decrease counter by 10\"\n                onClick={handleClick}\n              />\n              <hr />\n              Global state: {JSON.stringify(globalState)}\n            </header>\n          </div>\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/dashboard\">\n          <DashBoard />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { css } from '@emotion/react';\n\nexport const globalStyles = css`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n      'Helvetica Neue', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n  .App {\n    text-align: center;\n  }\n\n  .App-logo {\n    height: 40vmin;\n    pointer-events: none;\n  }\n\n  @media (prefers-reduced-motion: no-preference) {\n    .App-logo {\n      animation: App-logo-spin infinite 20s linear;\n    }\n  }\n\n  .App-header {\n    background-color: #282c34;\n    min-height: calc(100vh - 36px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n  }\n\n  .App-link {\n    color: #61dafb;\n  }\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { createTheme } from '@mui/material/styles';\nimport * as colors from '@mui/material/colors';\n\n// Ajust MUI Theme here:\nconst adjustedMuiTheme = createTheme({\n  palette: {\n    primary: {\n      main: colors.red[400],\n    },\n    secondary: {\n      main: colors.blue[500],\n    },\n  },\n});\n\n// Ajust USer Theme here:\nconst userTheme = {\n  color: {\n    red: colors.red[300],\n    blue: colors.blue[600],\n    white: 'white',\n  },\n  fontSize: {\n    default: '16px',\n    small: '12px',\n  },\n};\n\nexport const theme = { ...adjustedMuiTheme, ...userTheme };\n","import React from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\nimport { StylesProvider } from '@mui/styles';\nimport { globalStyles } from './globalStyles';\nimport { theme } from './theme';\n\nexport const StylesAndThemeProvider = ({ children }) => (\n  <StylesProvider injectFirst>\n    <ThemeProvider theme={theme}>\n      <Global styles={globalStyles} />\n      {children}\n    </ThemeProvider>\n  </StylesProvider>\n);\n","import React, { useState, useMemo } from 'react';\nimport { defaultGlobalState } from './defaultGlobalState';\nimport { GlobalStateContext } from './GlobalStateContext';\n\nexport const GlobalStateContextProvider = ({ children }) => {\n  const [globalState, setGlobalState] = useState(defaultGlobalState);\n\n  const contextValue = useMemo(\n    () => [globalState, setGlobalState],\n    [globalState]\n  );\n\n  return (\n    <GlobalStateContext.Provider value={contextValue}>\n      {children}\n    </GlobalStateContext.Provider>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { StylesAndThemeProvider } from './styles/StylesAndThemeProvider';\nimport { GlobalStateContextProvider } from './store/GlobalStateContextProvider';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StylesAndThemeProvider>\n      <GlobalStateContextProvider>\n        <App />\n      </GlobalStateContextProvider>\n    </StylesAndThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}